<%=
    # This code finds the `boot.cfg` file in the repository, parses it, and
    # makes a set of modifications intended to make it net-boot from Razor.
    #
    # I chose this path because the boot.cfg file varies between releases of
    # ESXi (such as 5.0 to 5.5), and could quite legitimately vary between
    # smaller jumps than that -- after all, it is inside their boot loader,
    # and they can change the construction of the installer CD without
    # breaking anything...
    #
    # The alternative was to copy in the boot.cfg, modify it the way this code
    # will do on the fly, and then use that.  That is actually the exact
    # process documented for setting up ESXi PXE boot -- statically make this
    # change -- too.
    #
    # Given the changes are purely mechanical and well understood, this will
    # do for the majority of cases without the risk / cost that a slight
    # variant in the CD breaks everything, I think. --daniel 2013-10-14
    (File.read(repo_file('/boot.cfg')) rescue '').split("\n").map do |line|
      case line
        when /^kernel=/
          'kernel=' + repo_url(line.sub('kernel=', ''))
        when /^modules=/
          line.gsub('/', repo_url('/'))
        when /^kernelopt=/
          kernel_opts = {}

          if File.exists?("/opt/razor-server/tasks/vmware_esxi.task/ks_" + node.facts["serialnumber"] + ".cfg.erb")
            kernel_opts[:ks] = file_url("ks_" + node.facts["serialnumber"] + ".cfg")
          else
            kernel_opts[:ks] = file_url("ks.cfg")
          end

          options = node.policy.node_metadata["installer_options"]
          if options && options["network_configuration"]
            require "json"
            require "asm/network_configuration"

            network_config = ASM::NetworkConfiguration.new(JSON.parse(options["network_configuration"]))
            partition = network_config.get_partitions("PXE").first
            if partition
              kernel_opts[:ksdevice] = partition.mac_address if partition.mac_address

              network = partition.networkObjects.find { |p| p["type"] == "PXE" }
              static = network.static && network.staticNetworkConfiguration
              if static
                kernel_opts.merge!(:ip => static.ipAddress, :subnet => static.subnet, :gateway => static.gateway)
                dns_server = [static.primaryDns, static.secondaryDns].compact.first
                kernel_opts[:nameserver] = dns_server if dns_server
              end
            end
          end

          # Docs on kernel boot options: http://pubs.vmware.com/vsphere-50/index.jsp?topic=%2Fcom.vmware.vsphere.install.doc_50%2FGUID-9040F0B2-31B5-406C-9000-B02E8DA785D4.html
          "kernelopt=%s" % kernel_opts.map { |k, v| "%s=%s" % [k, v] }.join(" ")
        else
          line
      end
    end.join("\n")
%>
